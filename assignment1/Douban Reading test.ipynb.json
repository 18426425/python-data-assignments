{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.3319.102 Safari/537.36\n"
     ]
    }
   ],
   "source": [
    "from fake_useragent import UserAgent\n",
    "ua = UserAgent()\n",
    "print(ua.chrome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_html(url):\n",
    "    headers = {'User-Agent':'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36 Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10'}\n",
    "    resp = requests.get(url, headers = headers).text\n",
    "    return resp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def html_parse():\n",
    "    for url in all_page():\n",
    "        soup = BeautifulSoup(get_html(url),'html.parser')\n",
    "        \n",
    "        alldiv = soup.find_all('div',class_='pl2')\n",
    "        names = [a.find('a')['title'] for a in alldiv]\n",
    "        \n",
    "        allp = soup.find_all('p',class_='pl')\n",
    "        authors = [p.get_text() for p in allp]\n",
    "        \n",
    "        starspan = soup.find_all('span',class_='rating_nums')\n",
    "        scores = [s.get_text() for s in starspan]\n",
    "        \n",
    "        alln = soup.find_all('span',class_='pl')\n",
    "        people_num = [n.get_text() for n in alln]\n",
    "        peopel_num = str(people_num).strip()\n",
    "        \n",
    "        sum_div = soup.select('tr.item > td:nth-of-type(2)')\n",
    "        sums = []\n",
    "        for div in sum_div:\n",
    "            sumspan = div.find('span', class_='inq')\n",
    "            summary = sumspan.get_text() if sumspan else '暂无'\n",
    "            sums.append(summary)\n",
    "    \n",
    "        #sumspan = soup.find_all('span',class_='inq')\n",
    "        #sums = [i.get_text() for i in sumspan]\n",
    "        \n",
    "        for name, author, score, people_number, summary in zip (names, authors, scores, people_num, sums):\n",
    "            name = '书名：' + str(name) + '\\n'\n",
    "            author = '作者：' + str(author) + '\\n'\n",
    "            score = '评分：' + str(score) + '\\n'\n",
    "            people_number = '评价人数：' + str(people_number) + '\\n'\n",
    "            summary = '简介：' + str(summary) + '\\n'\n",
    "            data = name + author + score + people_number + summary\n",
    "            f.writelines(data + ' ' + '\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def all_page():\n",
    "    base_url = 'https://book.douban.com/top250?start='\n",
    "    urllist = []\n",
    "    for page in range (0, 250, 25):\n",
    "        allurl = base_url + str(page)\n",
    "        urllist.append(allurl)       \n",
    "    return urllist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = '豆瓣读书top250.txt'\n",
    "f = open (filename, 'w', encoding = 'utf-8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "html_parse()\n",
    "f.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
